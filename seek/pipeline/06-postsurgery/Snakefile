import os
import sys
from pathlib import Path

from mne_bids import make_bids_basename

sys.path.append("../../../")
from seek.pipeline.fileutils import BidsRoot, BIDS_ROOT
from seek.format.bids import bids_conversion

"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_pipeline_coregistration.pdf

"""
configfile: "../config/localconfig.yaml"

# get the freesurfer patient directory
bids_root = BidsRoot(BIDS_ROOT(config['bids_root']))
subject_wildcard = "{subject}"

# initialize directories that we access in this snakemake
RAW_CT_FOLDER = bids_root.get_rawct_dir(subject_wildcard)
RAW_MRI_FOLDER = bids_root.get_postmri_dir(subject_wildcard)
FS_DIR = bids_root.freesurfer_dir
FSPATIENT_SUBJECT_DIR = bids_root.get_freesurfer_patient_dir(subject_wildcard)
FSOUT_MRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR / "mri")
FSOUT_POSTMRI_FOLDER = Path(FSPATIENT_SUBJECT_DIR / "postsurgerymri")

session = 'postsurgery'

def _get_bids_basename(subject, imgtype):
    """Wildcard function to get bids_basename."""
    bids_fname = make_bids_basename(subject,
                                    session=session,
                                    suffix=f"{imgtype}.nii.gz")
    return bids_fname

def _get_subject_dir(bids_root, subject):
    return os.path.join(bids_root, f"sub-{subject}")

def _get_anat_bids_dir(bids_root, subject):
    return os.path.join(_get_subject_dir(bids_root, subject), f'ses-{session}', 'anat')

subworkflow reconstruction_workflow:
    workdir:
        "../02-reconstruction/"
    snakefile:
        "../02-reconstruction/Snakefile"
    configfile:
        "../config/localconfig.yaml"


# First rule
rule all:
    input:
        # MRI_NIFTI_IMG = expand(os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard),
        #                                     _get_bids_basename(subject_wildcard, imgtype='T1w')),
        #                                     subject=config['patients']),
        # mapping matrix for post T1 to pre T1
        MAPPING_FILE = expand(os.path.join(FSOUT_POSTMRI_FOLDER, "fsl_postt1-to-t1_omat.txt"),
                              subject=config['patients']),
    params:
        bids_root = bids_root.bids_root,
    shell:
        "echo 'done';"
        "bids-validator {params.bids_root};"

"""
Rule for prepping fs_recon by converting dicoms -> NIFTI images.

They are reoriented into 'LAS' orientation. For more information, see
BIDS specification.
"""
rule convert_dicom_to_bids:
    params:
        MRI_FOLDER = RAW_MRI_FOLDER,
        bids_root = bids_root.bids_root,
    output:
        MRI_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard),
                                     _get_bids_basename(subject_wildcard, imgtype='T1w')),
    run:
        bids_conversion.convert_img_to_bids(params.MRI_FOLDER, params.bids_root, output.MRI_bids_fname)



"""
Rule for coregistering .nifit images -> .nifti for T1 space using Flirt in FSL.

E.g. useful for CT, and DTI images to be coregistered
"""
rule coregistert1_post_to_pre:
    input:
        MRI_bids_fname = os.path.join(_get_anat_bids_dir(bids_root.bids_root, subject_wildcard),
                                     _get_bids_basename(subject_wildcard, imgtype='T1w')),
        PREMRI_NIFTI_IMG = reconstruction_workflow(os.path.join(FSOUT_MRI_FOLDER, "T1.nii")),
    output:
        PREMRI_NIFTI_IMG = os.path.join(FSOUT_POSTMRI_FOLDER, "preT1.nii"),
        POSTMRI_NIFTI_IMG = os.path.join(FSOUT_POSTMRI_FOLDER, "postT1_in_preT1.nii.gz"),
        # mapping matrix for post to pre in T1
        MAPPING_FILE_ORIG = os.path.join(FSOUT_POSTMRI_FOLDER, "fsl_postt1-to-t1_omat.txt"),
    shell:
        "cp {input.PREMRI_NIFTI_IMG} {output.PREMRI_NIFTI_IMG};"
        "flirt -in {input.MRI_bids_fname} \
                            -ref {input.PREMRI_NIFTI_IMG} \
                            -omat {output.MAPPING_FILE_ORIG} \
                            -out {output.POSTMRI_NIFTI_IMG};"
